#!/usr/bin/env node

var fs = require("fs"),
	extend = require("extend"),
	spawn = require("./lib/spawn").spawn,
	configurator = require("./lib/configurator"),
	config = configurator.config(),
	args = configurator.arguments(),
	checker = require('./lib/file-checker')(config.file, config.interval, checkFileLoop),
	parseContent = configurator.parsers().parseContent,
	pattern = "\\d \\[(\\w*)\\s*\\]: .*",
	spawns = {},
	content = "";

if(args.run) {
	process.on("SIGINT",cleanupAndExit);
	process.on("SIGTERM",cleanupAndExit);
	run();
}

function run() {
	try {
		checker.start();
	} catch(e){
		console.log(e);
		process.exit(0);
	}
}

function checkFileLoop(){
	var newContent = fs.readFileSync(config.file, {encoding:"utf8"});
	if(newContent != content) {
		parseContent(newContent, executeCommand);
	}
	content = newContent;
}

function executeCommand(adapters) {
	removeUnusedAdapters(adapters);
	connectNewAdapters(adapters);
}

function removeUnusedAdapters(adapters) {
	for(var child in spawns) {
		if(adapters.indexOf(child) < 0) {
			removeAdapter(child);
		}
	}
}

function removeAdapter(adapter) {
	if(spawns[adapter]){
		spawns[adapter].kill("SIGKILL");
		delete spawns[adapter];
	}
}

function connectNewAdapters(adapters) {
	for(var index in adapters) {
		var adapter = adapters[index];

		spawnAlsaConnection(adapter);
	}
}

function spawnAlsaConnection(adapter) {
	if(spawns[adapter]){
		return;
	}
	
	spawns[adapter] = spawn(config.command, replaceArgumentsPlaceholders(config.args, adapter))
		.on("error", function(err, signal) {
			onErrorFunc(err, signal);
			removeAdapter(adapter);
		})
		.on("exit", function() {
			removeAdapter(adapter);
		})
		.run();
}

function replaceArgumentsPlaceholders(args, adapter){
	var a = extend({}, args);
	a["-j"] = a["-j"].replace("##alias##", config.alias[adapter] || adapter);
	a["-d"] = a["-d"].replace("##adapter##", adapter);
	return a;
}

function onErrorFunc(err, signal){
	console.log(">>>>>>>>> ERROR: ", err, signal);
}

function cleanupAndExit() {
	removeAllAdapters();
	process.exit(0);
}

function removeAllAdapters(){
	for(var child in spawns) {
		removeAdapter(child);
	}
}